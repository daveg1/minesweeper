{"version":3,"file":"game.js","mappings":"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","sources":["webpack://minesweeper/./src/Cell.js","webpack://minesweeper/./src/Board.js","webpack://minesweeper/./src/Game.js","webpack://minesweeper/./src/index.js"],"sourcesContent":["class Cell {\r\n  static states = {\r\n    HIDDEN: 'hidden',\r\n    OPENED: 'opened',\r\n    FLAGGED: 'flagged',\r\n    EXPLODED: 'exploded',\r\n    PRESSED: 'pressed',\r\n  }\r\n\r\n  constructor (x, y, element) {\r\n    this.x = x\r\n    this.y = y\r\n    this.element = element\r\n    this.isMine = false\r\n  }\r\n\r\n  set state(v) {\r\n    this.element.dataset.state = v\r\n  }\r\n\r\n  get state() {\r\n    return this.element.dataset.state\r\n  }\r\n\r\n  fill(v) {\r\n    this.element.classList.add(`v-${v}`)\r\n    this.element.textContent = v\r\n  }\r\n}\r\n\r\nexport default Cell","import Cell from './Cell.js'\r\n\r\nfunction random(limit) {\r\n  return Math.floor(Math.random() * limit);\r\n}\r\n\r\nclass Board {\r\n  constructor (width = 10, height = 10, mines = 10, game = null) {\r\n    this.cells = []\r\n    this.grid = []\r\n    this.width = width\r\n    this.height = height\r\n    this.mines = mines\r\n    this.game = game\r\n    this.element = document.getElementById('board')\r\n\r\n    // 1. Fill grid with empty cells\r\n    // 2. Place mines\r\n    this.setUpBoard()\r\n    this.generateMines()\r\n    this.handleMouseEvents()\r\n  }\r\n\r\n  // ========== Setup\r\n  setUpBoard() {\r\n    // Wipe board\r\n    this.grid = []\r\n    this.cells = []\r\n    this.element.innerHTML = ''\r\n  \r\n    for (let i = 0; i < this.width; ++i) {\r\n      // Row\r\n      const row = []\r\n  \r\n      for (let j = 0; j < this.height; ++j) {\r\n        const element = document.createElement('div')\r\n        element.className = 'c-cell'\r\n        element.dataset.state = 'hidden'\r\n\r\n        const cell = new Cell(i,j,element)\r\n        \r\n        row.push(cell)\r\n        this.cells.push(cell)\r\n        this.element.appendChild(element)\r\n      }\r\n  \r\n      this.grid.push(row)\r\n    }\r\n  }\r\n  \r\n  generateMines() {\r\n    for (let i = 0; i < this.mines; ++i) {\r\n      let placed = false;\r\n      do {\r\n        const x = random(this.width)\r\n        const y = random(this.height)\r\n        const cell = this.grid[x][y]\r\n  \r\n        if (!cell.isMine) {\r\n          cell.isMine = true\r\n          placed = true\r\n        }\r\n      } while (!placed)\r\n    }\r\n  }\r\n\r\n  handleMouseEvents() {\r\n    this.cells.forEach(cell => {\r\n      \r\n      // Mouse 1 pressed on cell\r\n      // Mouse 1 moved over cell whilst pressed\r\n      cell.element.onmousedown = // next line\r\n      cell.element.onmouseover = e => {\r\n        if (e.target.dataset.state !== Cell.states.HIDDEN)\r\n          return;\r\n\r\n        if (e.which === 1) {\r\n          cell.state = Cell.states.PRESSED\r\n        }\r\n      }\r\n\r\n      cell.element.onmouseup = e => {\r\n        if (e.which === 1) {\r\n          this.openCell(cell)\r\n          this.checkWin()\r\n        }\r\n      }\r\n\r\n      cell.element.onmouseout = e => {\r\n        if (e.target.dataset.state === Cell.states.PRESSED)\r\n          cell.state = Cell.states.HIDDEN\r\n      }\r\n\r\n      // Right click\r\n      cell.element.oncontextmenu = e => {\r\n        e.preventDefault()\r\n        this.markCell(cell)\r\n        this.game.updateFlags()\r\n      }\r\n    })\r\n  }\r\n  \r\n  // ========== Helpers\r\n  getAdjacentCells({ x, y }) {\r\n    const adjacent = []\r\n  \r\n    for (let i = x-1; i <= x+1; ++i) {\r\n      for (let j = y-1; j <= y+1; ++j) {\r\n        // Skip out of bounds cells\r\n        if (i < 0 || j < 0 || i >= this.width || j >= this.height)\r\n          continue;\r\n  \r\n        // Skip same cell\r\n        if (i === x && j === y)\r\n          continue;\r\n  \r\n        adjacent.push(this.grid[i][j])\r\n      }\r\n    }\r\n  \r\n    return adjacent\r\n  }\r\n\r\n  clearMouseEvents() {\r\n    this.cells.forEach(cell => {\r\n      cell.element.onmousedown   = null\r\n      cell.element.onmouseover   = null\r\n      cell.element.onmouseup     = null\r\n      cell.element.onmouseout    = null\r\n      cell.element.oncontextmenu = null\r\n    })\r\n  }\r\n\r\n  // ========== Actions\r\n  openCell(cell) {\r\n    if (cell.state !== Cell.states.HIDDEN && cell.state !== Cell.states.PRESSED)\r\n      return;\r\n\r\n    if (cell.isMine) {\r\n      this.game.lose()\r\n      return;\r\n    }\r\n  \r\n    cell.state = Cell.states.OPENED\r\n\r\n    const adjacent = this.getAdjacentCells(cell)\r\n    const mines = adjacent.filter(c => c.isMine)\r\n  \r\n    if (mines.length === 0) {\r\n      adjacent.forEach(this.openCell.bind(this))\r\n    } else {\r\n      cell.fill(mines.length)\r\n      cell.remove\r\n    }\r\n  }\r\n\r\n  markCell(cell) {\r\n    if (cell.state === Cell.states.FLAGGED) {\r\n      cell.state = Cell.states.HIDDEN\r\n      this.game.flags++\r\n    } else if (cell.state === Cell.states.HIDDEN) {\r\n      cell.state = Cell.states.FLAGGED\r\n      this.game.flags--\r\n    }\r\n  }\r\n  \r\n  setStateOfMines(state) {\r\n    const mines = this.cells.filter(c => c.isMine)\r\n\r\n    mines.forEach(mine => {\r\n      mine.state = state\r\n    })\r\n  }\r\n\r\n  checkWin() {\r\n    const remaining = this.cells.filter(c => c.state !== Cell.states.OPENED && c.state !== Cell.states.PRESSED)\r\n\r\n    if (this.game.flags === 0 || remaining.length === this.mines) {\r\n      this.game.win()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Board","import Board from './Board.js'\r\nimport Cell from './Cell.js'\r\n\r\n/**\r\n * Manages the game state and other settings.\r\n */\r\nclass Game {\r\n  constructor (width, height, mines) {\r\n    this.width = width\r\n    this.height = height\r\n    this.mines = mines\r\n    this.flags = mines\r\n    this.board = null\r\n  }\r\n\r\n  updateFlags() {\r\n    document.getElementById('flags').textContent = this.flags\r\n  }\r\n\r\n  updateGrid() {\r\n    document.getElementById('board').style.cssText = `--w: ${this.width}; --h: ${this.height}`\r\n  }\r\n\r\n  /**\r\n   * Starts a new game\r\n   */\r\n  start() {\r\n    this.updateGrid()\r\n    this.flags = this.mines\r\n    this.updateFlags()\r\n    this.board = new Board(this.height, this.width, this.mines, this)\r\n  }\r\n\r\n  /**\r\n   * Signals a win\r\n   */\r\n  win() {\r\n    this.board.clearMouseEvents()\r\n    this.board.setStateOfMines(Cell.states.FLAGGED)\r\n    document.getElementById('flags').textContent = \"You win!\"\r\n  }\r\n\r\n  /**\r\n   * Signals a loss\r\n   */\r\n  lose() {\r\n    this.board.clearMouseEvents()\r\n    this.board.setStateOfMines(Cell.states.EXPLODED)\r\n    document.getElementById('flags').textContent = \"You lose!\"\r\n  }\r\n}\r\n\r\nexport default Game","\"use strict\";\r\n\r\nimport Game from './Game.js'\r\n\r\nwindow.onload = e => {\r\n  const game = new Game(30,20,100)\r\n  game.start()\r\n\r\n  document.getElementById('new-game').onclick = game.start.bind(game)\r\n}"],"names":["Cell","x","y","element","this","isMine","dataset","state","v","classList","add","textContent","HIDDEN","OPENED","FLAGGED","EXPLODED","PRESSED","random","limit","Math","floor","Board","width","height","mines","game","cells","grid","document","getElementById","setUpBoard","generateMines","handleMouseEvents","innerHTML","i","row","j","createElement","className","cell","push","appendChild","placed","forEach","onmousedown","onmouseover","e","target","which","onmouseup","openCell","checkWin","onmouseout","oncontextmenu","preventDefault","markCell","updateFlags","adjacent","lose","getAdjacentCells","filter","c","length","bind","fill","remove","flags","mine","remaining","win","Game","board","style","cssText","updateGrid","clearMouseEvents","setStateOfMines","window","onload","start","onclick"],"sourceRoot":""}